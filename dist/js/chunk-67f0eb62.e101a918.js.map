{"version":3,"sources":["webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/components/VCombobox/VCombobox.ts","webpack:///./node_modules/core-js/modules/es.string.ends-with.js","webpack:///../../../src/components/VTextarea/VTextarea.ts"],"names":["defaultMenuProps","offsetY","offsetOverflow","transition","VSelect","name","props","allowOverflow","type","default","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","undefined","data","lazySearch","this","computed","classes","selectedIndex","computedItems","selectedValues","selectedItems","map","item","hasDisplayedItems","hideSelected","filteredItems","some","length","currentRange","selectedItem","String","getText","internalSearch","allItems","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","items","watch","internalValue","isFocused","document","$refs","input","isMenuActive","val","oldVal","activateMenu","created","methods","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","index","currentItem","getDisabled","newIndex","clearableCallback","genInput","VTextField","mergeData","attrs","autocomplete","domProps","value","genInputSlot","slot","genSelections","hasSlot","onClick","isAppendInner","e","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItemText","event","delimiters","returnObject","editingIndex","computedCounterValue","$slots","delimiter","d","genChipSelection","chip","dblclick","onChipInput","onEnterDown","getMenuIndex","selectionStart","setValue","updateEditing","updateCombobox","isUsingSlot","Boolean","$scopedSlots","updateTags","menuIndex","onPaste","pastedItemText","findExistingIndex","$","getOwnPropertyDescriptor","f","toLength","notARegExp","requireObjectCoercible","correctIsRegExpLogic","IS_PURE","nativeEndsWith","endsWith","min","Math","CORRECT_IS_REGEXP_LOGIC","MDN_POLYFILL_BUG","descriptor","prototype","writable","proto","forced","searchString","that","endPosition","arguments","len","end","search","call","slice","baseMixins","autoGrow","noResize","rowHeight","Number","validator","v","isNaN","parseFloat","rows","parseInt","noResizeHandle","lazyValue","$nextTick","mounted","setTimeout","calculateInputHeight","height","minHeight"],"mappings":"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","file":"js/chunk-67f0eb62.e101a918.js","sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport { keyCodes, getObjectValueByPath } from '../../util/helpers'\n\n// Types\nimport { PropType } from 'vue'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    },\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | undefined>,\n      default: undefined,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => this.filter(item, String(this.internalSearch), String(this.getText(item))))\n    },\n    internalSearch: {\n      get (): string | undefined {\n        return this.lazySearch\n      },\n      set (val: any) {\n        this.lazySearch = val\n\n        this.$emit('update:search-input', val)\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = undefined\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      if (this.readonly) return\n\n      const index = this.selectedItems.length - 1\n\n      if (this.selectedIndex === -1 && index !== 0) {\n        this.selectedIndex = index\n        return\n      }\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n\n      if (this.getDisabled(currentItem)) return\n\n      const newIndex = this.selectedIndex === index\n        ? this.selectedIndex - 1\n        : this.selectedItems[this.selectedIndex + 1]\n          ? this.selectedIndex\n          : -1\n\n      if (newIndex === -1) {\n        this.setValue(this.multiple ? [] : undefined)\n      } else {\n        this.selectItem(currentItem)\n      }\n\n      this.selectedIndex = newIndex\n    },\n    clearableCallback () {\n      this.internalSearch = undefined\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections () {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (this.isDisabled) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      VSelect.options.methods.onKeyDown.call(this, e)\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any) {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData!.setData('text/plain', currentItemText)\n      event.clipboardData!.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropType } from 'vue'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array as PropType<string[]>,\n      default: () => ([]),\n    },\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      VSelect.options.methods.onKeyDown.call(this, e)\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value != null ? value : this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      value[this.editingIndex] = this.internalSearch\n\n      this.setValue(value)\n\n      this.editingIndex = -1\n    },\n    updateCombobox () {\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n\n      // If search is not dirty and is\n      // using slot, do nothing\n      if (isUsingSlot && !this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot\n      // to avoid a double input\n      if (isUsingSlot) this.internalSearch = undefined\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // do nothing\n      if (menuIndex < 0 &&\n        !this.searchIsDirty\n      ) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.indexOf(this.internalSearch)\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(this.internalSearch)\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData!.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n  },\n})\n","'use strict';\nvar $ = require('../internals/export');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar toLength = require('../internals/to-length');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\nvar IS_PURE = require('../internals/is-pure');\n\nvar nativeEndsWith = ''.endsWith;\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.endsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.endswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : min(toLength(endPosition), len);\n    var search = String(searchString);\n    return nativeEndsWith\n      ? nativeEndsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","// Styles\nimport './VTextarea.sass'\n\n// Extensions\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport Vue from 'vue'\n\ninterface options extends Vue {\n  $refs: {\n    input: HTMLTextAreaElement\n  }\n}\n\nconst baseMixins = mixins<options &\n  InstanceType<typeof VTextField>\n>(\n  VTextField\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-textarea',\n\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseInt(v, 10)),\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this),\n      }\n    },\n    noResizeHandle (): boolean {\n      return this.noResize || this.autoGrow\n    },\n  },\n\n  watch: {\n    lazyValue () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n    rowHeight () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n  },\n\n  mounted () {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight()\n    }, 0)\n  },\n\n  methods: {\n    calculateInputHeight () {\n      const input = this.$refs.input\n      if (!input) return\n\n      input.style.height = '0'\n      const height = input.scrollHeight\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight)\n      // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n      input.style.height = Math.max(minHeight, height) + 'px'\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.tag = 'textarea'\n      delete input.data!.attrs!.type\n      input.data!.attrs!.rows = this.rows\n\n      return input\n    },\n    onInput (e: Event) {\n      VTextField.options.methods.onInput.call(this, e)\n      this.autoGrow && this.calculateInputHeight()\n    },\n    onKeyDown (e: KeyboardEvent) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation()\n      }\n\n      this.$emit('keydown', e)\n    },\n  },\n})\n"],"sourceRoot":""}